# -*- coding: utf-8 -*-
"""add_qr_random_space_on_pdf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lykm2cN2elMyOiRGSeFjuGjg8H6q1o_l
"""

import numpy as np
import cv2, sys
import matplotlib.pyplot as plt
from PIL import Image, ImageDraw, ImageFont, ImageChops
import os
from pdf2image import convert_from_path
import img2pdf
import time
import random
import itertools

def pdf_to_jpg(file_name):
    total_page = 0
    pages = convert_from_path(file_name)
    for i, page in enumerate(pages):
        page.save("./temp/"+file_name+str(i)+".jpg", "JPEG")
        total_page += 1
    return total_page

def pixelcheck(image):
    threshold = (10, 10, 10)
    im = image
    background = Image.new(im.mode, im.size, im.getpixel((0, 0)))
    diff = ImageChops.difference(im, background)
    px = diff.load()
    for y in range(diff.height):
        for x in range(diff.width):
            if px[x, y] > threshold:
                return False
    return True

def image_check(infilename, crop_w, crop_h):
    """
    image file 와 crop한 이미지를 저장할 path 을 입력받아 crop_img를 저장한다.
    :param infilename:
        crop할 대상 image file 입력으로 넣는다.
    :param save_path:
        crop_image file의 저장 경로를 넣는다.
    :return:
    """
 
    img = Image.open(infilename)
    (img_h, img_w) = img.size
    # print(img.size)
 
    # crop 할 사이즈 : grid_w, grid_h
    grid_w = crop_w # crop width
    grid_h = crop_h # crop height
    range_w = (int)(img_w/grid_w)
    range_h = (int)(img_h/grid_h)
    # print(range_w, range_h)
 
    available_list = []
    
    for w in range(range_w):
        for h in range(range_h):
            bbox = (h*grid_h, w*grid_w, (h+1)*(grid_h), (w+1)*(grid_w))
            # print(h*grid_h, w*grid_w, (h+1)*(grid_h), (w+1)*(grid_w))
            # 가로 세로 시작, 가로 세로 끝
            crop_img = img.crop(bbox)
            # print(pixelcheck(crop_img))
            if pixelcheck(crop_img):
                coord = ([h*grid_h, w*grid_w])
                available_list.append(coord)
            
    return available_list

def save_file_with_qr(file_name, qr_file_name, x, y):
    save_name = file_name.split('/')[-1]
    target_image = Image.open(file_name) # 경로를 포함한 파일명  
    add_image = Image.open(qr_file_name)
    target_image.paste(im = add_image, box =(x, y))
    target_image.save("temp_result/"+save_name)

# 만약 crop_img가 여백이라면 해당 좌표?를 리스트에 모두 저장
# 리스트가 반환되면 랜덤 시드로 돌려서 하나 좌표 값을 뽑는다. 
# save_file_with_qr 함수를 이용해서 qr 좌표를 박는다.

def jpg_to_pdf(saved_place, file_name, total_page):
    dirname = saved_place
    with open(file_name, "wb") as f:
        pdf_list = []
        i=0
        for i in range(total_page + 1):
            for file in os.listdir(dirname):
                if file.endswith("pdf"+str(i)+".jpg"):
                    path = os.path.join(dirname, file)
                    pdf_list.append(path)
                
        pdf = img2pdf.convert(pdf_list)
        f.write(pdf)

total_page = pdf_to_jpg("test_pdf.pdf")
img_list = []
my_path = './temp/'
for file in os.listdir(my_path):
    if file.endswith(".jpg"):
        img_list.append(file)

qr_image = Image.open('test_qr.jpg')
qr_size = qr_image.size

for image in img_list:
    lst = image_check(my_path+image, qr_size[0], qr_size[1])
    qr = list(itertools.chain.from_iterable(random.sample(lst, 1)))
    save_file_with_qr(my_path+image, 'test_qr.jpg', qr[0], qr[1])

jpg_to_pdf('./temp_result/', 'output.pdf', total_page)

